template:
  name: create objects non prod
  type: Step
  projectIdentifier: Iaac
  orgIdentifier: default
  spec:
    type: ShellScript
    spec:
      shell: Bash
      executionTarget: {}
      source:
        type: Inline
        spec:
          script: |-
            echo -e "[connections.connection]\naccountname = <+pipeline.variables.account_name>\nusername = <+pipeline.variables.username>\npassword = <+secrets.getValue('account.snowflake_password')>" > ~/.snowsql/config

            # Create DB
            echo "

            Executing command: CREATE DATABASE <+env.name>_<+stage.variables.DB_name>;"
            snowsql -c connection -q "CREATE DATABASE <+env.name>_<+stage.variables.DB_name>;"

            # Create schema
            echo "

            Executing command: USE DATABASE <+env.name>_<+stage.variables.DB_name>; CREATE SCHEMA <+env.name>_<+stage.variables.Schema_name>;"
            snowsql -c connection -q "USE DATABASE <+env.name>_<+stage.variables.DB_name>; CREATE SCHEMA <+env.name>_<+stage.variables.Schema_name>;"

            # Create Table
            echo "

            Executing command: USE DATABASE <+env.name>_<+stage.variables.DB_name>; 
            CREATE TABLE employees (id INT, name STRING, department STRING, salary NUMBER);
            CREATE TABLE departments (dept_id INT, dept_name STRING, manager STRING);
            CREATE TABLE projects (proj_id INT, proj_name STRING, budget NUMBER);"
            snowsql -c connection -q "USE DATABASE <+env.name>_<+stage.variables.DB_name>; 
            CREATE TABLE employees (id INT, name STRING, department STRING, salary NUMBER);
            CREATE TABLE departments (dept_id INT, dept_name STRING, manager STRING);
            CREATE TABLE projects (proj_id INT, proj_name STRING, budget NUMBER);"

            # Populate Table
            echo "

            Executing command: USE DATABASE <+env.name>_<+stage.variables.DB_name>; INSERT INTO employees (id, name, department, salary) VALUES 
            (1, 'Alice', 'Engineering', 100000),
            (2, 'Bob', 'Marketing', 95000),
            (3, 'Charlie', 'Sales', 88000);

            INSERT INTO departments (dept_id, dept_name, manager) VALUES 
            (101, 'Engineering', 'Alice'),
            (102, 'Marketing', 'Bob'),
            (103, 'Sales', 'Charlie');

            INSERT INTO projects (proj_id, proj_name, budget) VALUES 
            (1001, 'Project A', 50000),
            (1002, 'Project B', 75000);"
            snowsql -c connection -q "USE DATABASE <+env.name>_<+stage.variables.DB_name>; INSERT INTO employees (id, name, department, salary) VALUES 
            (1, 'Alice', 'Engineering', 100000),
            (2, 'Bob', 'Marketing', 95000),
            (3, 'Charlie', 'Sales', 88000);

            INSERT INTO departments (dept_id, dept_name, manager) VALUES 
            (101, 'Engineering', 'Alice'),
            (102, 'Marketing', 'Bob'),
            (103, 'Sales', 'Charlie');

            INSERT INTO projects (proj_id, proj_name, budget) VALUES 
            (1001, 'Project A', 50000),
            (1002, 'Project B', 75000);"


            # Create View
            echo "

            Executing command: USE DATABASE <+env.name>_<+stage.variables.DB_name>; 
            CREATE VIEW senior_employee AS SELECT name, department FROM employees WHERE salary > 90000;"
            snowsql -c connection -q "USE DATABASE <+env.name>_<+stage.variables.DB_name>; 
            CREATE VIEW senior_employee AS SELECT name, department FROM employees WHERE salary > 90000;"

            # Create Stage
            echo "

            Executing command: USE DATABASE <+env.name>_<+stage.variables.DB_name>; 
            CREATE STAGE my_s3_stage URL = 's3://my_bucket/data' CREDENTIALS = (AWS_KEY_ID = 'YOUR_AWS_KEY' AWS_SECRET_KEY = 'YOUR_SECRET_KEY');"
            snowsql -c connection -q "USE DATABASE <+env.name>_<+stage.variables.DB_name>; 
            CREATE STAGE my_s3_stage URL = 's3://my_bucket/data' CREDENTIALS = (AWS_KEY_ID = 'YOUR_AWS_KEY' AWS_SECRET_KEY = 'YOUR_SECRET_KEY');"
      environmentVariables: []
      outputVariables: []
      delegateSelectors: []
    timeout: 10m
  identifier: create_objects_non_prod
  versionLabel: v1
